(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.3.1
/**
 * Copyright (c) 2013-2015, Thomas J. Otterson
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * @license
 */
var join$ = [].join;
(function($){
  var _old;
  _old = $.fn.attr;
  $.fn.attr = function(){
    var map, attributes, i$, len$, attribute;
    if (this[0] && arguments.length === 0) {
      map = {};
      attributes = this[0].attributes;
      for (i$ = 0, len$ = attributes.length; i$ < len$; ++i$) {
        attribute = attributes[i$];
        map[attribute.name.toLowerCase()] = attribute.value;
      }
      return map;
    } else {
      return _old.apply(this, arguments);
    }
  };
  $.widget('barandis.selectplus', {
    options: {
      data: null,
      disabled: false,
      width: 0,
      inherit: false,
      rtl: false,
      deselectable: false,
      multiSelect: null,
      quickDeselect: false,
      maxSelected: Infinity,
      searchable: false,
      threshold: 0,
      anchoredSearch: true,
      splitSearch: true,
      defaultText: 'Select an item',
      notFoundText: 'No results match',
      change: null,
      blur: null,
      focus: null,
      resize: null,
      open: null,
      close: null
    },
    _setOption: function(key, value){
      var oldWidth, ddWidth;
      switch (key) {
      case 'rtl':
        if (value) {
          this.container.addClass('bar-sp-rtl');
        } else {
          this.container.removeClass('bar-sp-rtl');
        }
        this._super(key, value);
        break;
      case 'deselectable':
        if (!this.multiple) {
          if (value) {
            if (this.selectedOption) {
              this._buildDeselectControl();
            }
          } else {
            this.selection.find('.bar-sp-deselect').remove();
          }
        }
        this._super(key, value);
        break;
      case 'searchable':
        if (!this.multiple) {
          if (value) {
            this.searchField.removeClass('ui-helper-hidden-accessible');
          } else {
            this.searchField.addClass('ui-helper-hidden-accessible');
          }
        }
        this._super(key, value);
        break;
      case 'data':
        this._super(key, value);
        this._buildOptions();
        break;
      case 'threshold':
        if (!this.multiple) {
          if (!this.options.searchable || this.model.length <= value) {
            this.searchField.addClass('ui-helper-hidden-accessible');
          } else {
            this.searchField.removeClass('ui-helper-hidden-accessible');
          }
        }
        this._super(key, value);
        break;
      case 'disabled':
        this._super(key, value);
        this._setDisabledState();
        break;
      case 'width':
        oldWidth = this.width;
        this.width = value || this.element.outerWidth();
        if (oldWidth !== this.width) {
          this.container.css('width', this.width + "px");
          ddWidth = this.width - this._getBorderAndSideWidth(this.dropdown);
          this.dropdown.css('width', ddWidth + "px");
          this._resizeSearchField();
          this._trigger('resize', null, {
            item: this.selection,
            data: {
              height: this.selection.outerHeight(),
              width: this.selection.outerWidth()
            }
          });
          this._super(key, value);
        }
        break;
      case 'multiSelect':
      case 'inherit':
        break;
      default:
        this._super(key, value);
      }
    },
    _create: function(){
      var ref$, containerClasses, containerProps, ddWidth, this$ = this;
      this.multiple = (ref$ = this.options.multiSelect) != null
        ? ref$
        : !!this.element[0].multiple;
      this.active = false;
      this.clicked = false;
      this.open = false;
      this.destructionPending = false;
      this.highlightedOption = null;
      this.selectedOption = null;
      this.selections = 0;
      this.width = this.options.width || this.element.outerWidth();
      this.currentValue = this.multiple ? [] : null;
      this.containerId = (this.element.attr('id').length
        ? this.element.attr('id').replace(/[^\w]/g, '-')
        : this._generateContainerId()) + '-selectplus';
      this.container = null;
      this.dropdown = null;
      this.selectOptions = null;
      this.searchContainer = null;
      this.searchField = null;
      this.selection = null;
      this.containerClickAction = null;
      this.documentClickAction = null;
      this.backspaceAction = null;
      containerClasses = ['ui-widget', 'bar-sp'];
      containerClasses.push('bar-sp-' + (this.multiple ? 'multi' : 'single'));
      if (this.options.inherit && $.trim(this.element.attr('class')).length) {
        containerClasses.push(this.element.attr('class'));
      }
      if (this.options.rtl) {
        containerClasses.push('bar-sp-rtl');
      }
      containerProps = {
        id: this.containerId,
        'class': join$.call(containerClasses, ' '),
        style: "width:" + this.width + "px;",
        title: this.element.attr('title')
      };
      this.container = $('<div>', containerProps);
      if (this.multiple) {
        this.container.html("<ul class=\"ui-corner-all bar-sp-selections\" tabindex=\"-1\" role=\"combobox\" aria-activedescendant=\"\" aria-owns=\"" + this.containerId + "-drop\"><li class=\"bar-sp-search\" role=\"presentation\"><input type=\"text\" value=\"" + this.options.defaultText + "\" class=\"bar-sp-default\" autocomplete=\"off\" role=\"textbox\"></li></ul><div id=\"" + this.containerId + "-drop\" class=\"ui-widget-content ui-front ui-menu ui-corner-bottom ui-helper-hidden-accessible bar-sp-drop\"><ul class=\"bar-sp-options\" role=\"listbox\" aria-live=\"polite\" tabindex=\"-1\"></ul></div>");
      } else {
        this.container.html("<a href=\"javascript:void(0)\" class=\"ui-widget ui-state-default ui-corner-all bar-sp-selection\" tabindex=\"-1\" role=\"combobox\" aria-activedescendant=\"\"><span class=\"ui-priority-secondary\">" + this.options.defaultText + "</span><div class=\"ui-icon ui-icon-triangle-1-s\" role=\"presentation\"></div></a><div class=\"ui-widget-content ui-front ui-menu ui-corner-bottom ui-helper-hidden-accessible bar-sp-drop\" role=\"presentation\"><div class=\"bar-sp-search\" role=\"presentation\"><input type=\"text\" class=\"ui-corner-all\" autocomplete=\"off\" role=\"textbox\"></div><ul class=\"bar-sp-options\" role=\"listbox\" aria-live=\"polite\" tabindex=\"-1\"/></div>");
      }
      this.element.hide().after(this.container);
      this.dropdown = this.container.find('div.bar-sp-drop').first();
      ddWidth = this.width - this._getBorderAndSideWidth(this.dropdown);
      this.dropdown.css({
        width: ddWidth + 'px'
      });
      this.searchField = this.container.find('input').first();
      this.selectOptions = this.container.find('ul.bar-sp-options').first();
      if (this.multiple) {
        this.searchContainer = this.container.find('li.bar-sp-search').first();
        this.selection = this.container.find('ul.bar-sp-selections').first();
      } else {
        this.searchContainer = this.container.find('div.bar-sp-search').first();
        this.selection = this.container.find('a.bar-sp-selection').first();
      }
      $.each(this.element.attr(), function(name, value){
        if (/^aria-/.exec(name)) {
          this$.selection.attr(name, value);
        }
      });
      this._resizeSearchField();
      this._buildOptions();
      this._setTabIndex();
      this._trigger('resize', null, {
        item: this.selection,
        data: {
          height: this.selection.outerHeight(),
          width: this.selection.outerWidth()
        }
      });
      this.containerClickAction = function(event){
        var deselect;
        event.preventDefault();
        if (!this$.options.disabled) {
          deselect = event != null ? $(event.target).hasClass('bar-sp-deselect') : false;
          if (!this$.multiple && deselect) {
            this$._resetOptions(event);
          } else if (this$.multiple && this$.destructionPending) {
            this$.destructionPending = false;
          } else {
            if (!this$.active) {
              if (this$.multiple) {
                this$.searchField.val('');
              }
              $(document).click(this$.documentClickAction);
              this$._openDropdown();
            } else if (!this$.multiple && event != null && (event.target === this$.selection[0] || $(event.target).parents('a.bar-sp-selection').length)) {
              this$._toggleDropdown();
            }
            this$._activateWidget(event);
          }
        }
      };
      this.mousewheelAction = function(event){
        var origEvent, delta;
        origEvent = event.originalEvent;
        delta = origEvent.detail < 0 || origEvent.wheelDelta > 0
          ? 1
          : -1;
        if (delta > 0 && this$.selectOptions.scrollTop() === 0) {
          event.preventDefault();
        } else if (delta < 0 && this$.selectOptions.scrollTop() === this$.selectOptions.get(0).scrollHeight - this$.selectOptions.innerHeight()) {
          event.preventDefault();
        }
      };
      this.documentClickAction = function(event){
        if ($(event.target).parents("#" + this$.containerId).length) {
          this$.active = true;
        } else {
          this$._deactivateWidget(event);
        }
      };
      this.backspaceAction = function(event){
        var pos, nextAvailable;
        if (this.pendingDeselection) {
          pos = this._getModelIndex(this.pendingDeselection);
          this._deselectOption(event, $("#" + this._generateDomId('option', pos)));
          this._clearBackspace();
        } else {
          nextAvailable = this.searchContainer.siblings('li.bar-sp-selection').last();
          if (nextAvailable.length && !nextAvailable.hasClass('ui-state-disabled')) {
            this.pendingDeselection = nextAvailable;
            if (this.options.quickDeselect) {
              this.backspaceAction(event);
            } else {
              this.pendingDeselection.addClass('ui-state-focus');
            }
          }
        }
      };
      this._on(this.container, {
        click: this.containerClickAction,
        mousewheel: this.mousewheelAction,
        DOMMouseScroll: this.mousewheelAction,
        MozMousePixelScroll: this.mousewheelAction,
        mousedown: function(){
          this$.clicked = true;
        },
        mouseup: function(){
          this$.clicked = false;
        },
        mouseenter: function(){
          if (!this$.open && !this$.multiple) {
            this$.selection.addClass('ui-state-hover');
          }
        },
        mouseleave: function(){
          if (!this$.multiple) {
            this$.selection.removeClass('ui-state-hover');
          }
        }
      });
      this._on(this.selectOptions, {
        click: function(event){
          var eventTarget, target;
          eventTarget = $(event.target);
          target = eventTarget.hasClass('bar-sp-option')
            ? eventTarget
            : eventTarget.parents('.bar-sp-option').first();
          if (target.length) {
            this$.highlightedOption = target;
            this$._selectOption(event, target);
            this$.searchField.focus();
          }
        },
        mouseover: function(event){
          var eventTarget, target;
          eventTarget = $(event.target);
          target = eventTarget.hasClass('bar-sp-option')
            ? eventTarget
            : eventTarget.parents('.bar-sp-option').first();
          if (target.length) {
            this$._highlightOption(target);
          }
        },
        mouseout: function(event){
          var eventTarget;
          eventTarget = $(event.target);
          if (eventTarget.hasClass('bar-sp-option') || eventTarget.parents('.bar-sp-option').length) {
            this$._clearHighlight();
          }
        }
      });
      this._on(this.searchField, {
        blur: function(event){
          if (!this$.clicked) {
            this$._trigger('blur', event, {
              item: this$.container
            });
            this$._deactivateWidget(event);
          }
        },
        focus: function(event){
          if (!this$.active) {
            this$._activateWidget(event);
            this$._setSearchFieldDefault();
            this$._trigger('focus', event, {
              item: this$.container
            });
          }
        },
        keydown: function(event){
          var keyCode, ref$, prevSiblings, firstActive, nextSiblings;
          if (!this$.options.disabled) {
            keyCode = (ref$ = event.which) != null
              ? ref$
              : event.keyCode;
            this$._resizeSearchField();
            if (keyCode !== 8 && this$.pendingDeselection) {
              this$._clearBackspace();
            }
            switch (keyCode) {
            case 8:
              this$.backspaceLength = this$.searchField.val().length;
              break;
            case 9:
              if (this$.open) {
                this$._selectOption(event, this$.highlightedOption);
              }
              break;
            case 13:
              event.preventDefault();
              break;
            case 37:
            case 38:
              event.preventDefault();
              if (this$.open && this$.highlightedOption) {
                prevSiblings = this$.highlightedOption.parent().prevAll('li:not(.ui-helper-hidden)').children('a:not(.bar-sp-option-group)');
                if (prevSiblings.length) {
                  this$._highlightOption(prevSiblings.first());
                } else {
                  this$._clearHighlight();
                  this$._deactivateWidget(event);
                }
              }
              break;
            case 39:
            case 40:
              if (!this$.highlightedOption) {
                firstActive = this$.selectOptions.find('li:not(.ui-helper-hidden)').children('a:not(.bar-sp-option-group)').first();
                if (firstActive.length) {
                  this$._highlightOption(firstActive);
                }
              } else if (this$.open) {
                nextSiblings = this$.highlightedOption.parent().nextAll('li:not(.ui-helper-hidden)').children('a:not(.bar-sp-option-group)');
                if (nextSiblings.length) {
                  this$._highlightOption(nextSiblings.first());
                }
              }
              if (!this$.open) {
                this$._openDropdown();
              }
            }
          }
        },
        keyup: function(event){
          var keyCode, ref$;
          if (!this$.options.disabled) {
            keyCode = (ref$ = event.which) != null
              ? ref$
              : event.keyCode;
            switch (keyCode) {
            case 8:
              if (this$.multiple && this$.backspaceLength < 1 && this$.selections > 0) {
                this$.backspaceAction(event);
              } else if (!this$.pendingDeselection) {
                this$._clearHighlight();
                if (this$.open) {
                  this$._filterOptions();
                } else if (this$.searchField.val() !== '') {
                  this$._openDropdown();
                } else if (!this$.multiple && this$.selection.find('.bar-sp-deselect').length) {
                  this$._resetOptions(event);
                }
              }
              break;
            case 13:
              event.preventDefault();
              if (this$.open) {
                this$._selectOption(event, this$.highlightedOption);
              } else {
                this$._openDropdown();
              }
              break;
            case 27:
              if (this$.open) {
                this$._closeDropdown();
              }
              break;
            case 9:
            case 16:
            case 17:
            case 37:
            case 38:
            case 39:
            case 40:
            case 91:
              break;
            default:
              if (this$.open) {
                this$._filterOptions();
              } else {
                this$._openDropdown();
              }
            }
          }
        }
      });
      if (this.multiple) {
        this._on(this.selection, {
          click: function(event){
            event.preventDefault();
            if (this$.active && !($(event.target).hasClass('bar-sp-selection') || $(event.target).parents('bar-sp-selection').length) && !this$.open) {
              this$._openDropdown();
            }
          }
        });
      }
    },
    _destroy: function(){
      this._revertTabIndex();
      this.container.remove();
      this.element.show();
    },
    value: function(){
      var i$, ref$, len$, item, results$ = [];
      switch (false) {
      case !this.multiple:
        for (i$ = 0, len$ = (ref$ = this.currentValue).length; i$ < len$; ++i$) {
          item = ref$[i$];
          results$.push(this._sanitizeItem(item));
        }
        return results$;
        break;
      case !!this.currentValue:
        return null;
      default:
        return this._sanitizeItem(this.currentValue);
      }
    },
    widget: function(){
      return this.container;
    },
    disable: function(){
      this.options.disabled = true;
      this._setDisabledState();
    },
    enable: function(){
      this.options.disabled = false;
      this._setDisabledState();
    },
    refresh: function(){
      this._buildOptions();
    },
    clear: function(){
      this._resetOptions();
    },
    _buildOptions: function(){
      var content, i$, ref$, len$, option, ref1$, id;
      this.model = this._parse();
      if (this.multiple) {
        if (this.selections > 0) {
          this.selection.find('li.bar-sp-selection').remove();
          this.selections = 0;
        }
      } else {
        this.selection.find('span').addClass('ui-priority-secondary').text(this.options.defaultText);
        if (!this.options.searchable || this.model.length <= this.options.threshold) {
          this.searchField.addClass('ui-helper-hidden-accessible');
        } else {
          this.searchField.removeClass('ui-helper-hidden-accessible');
        }
      }
      content = '';
      for (i$ = 0, len$ = (ref$ = this.model).length; i$ < len$; ++i$) {
        option = ref$[i$];
        if (option.group) {
          content += this._createGroup(option);
        } else if (!option.empty) {
          content += this._createOption(option);
          if (option.selected) {
            if (this.multiple) {
              this._buildSelection(option);
              (ref1$ = this.currentValue)[ref1$.length] = option;
            } else {
              this.selection.find('span').removeClass('ui-priority-secondary').text(option.text);
              this.currentValue = option;
              if (this.options.deselectable) {
                this._buildDeselectControl();
              }
            }
          }
        }
      }
      this._setDisabledState();
      this._setSearchFieldDefault();
      this._resizeSearchField();
      this.selectOptions.html(content);
      if (!this.multiple && this.currentValue) {
        id = this._generateDomId('option', this.currentValue._nodeIndex);
        this.selectedOption = $("#" + id);
      }
    },
    _createGroup: function(group){
      if (!group.disabled) {
        group._domId = this._generateDomId('group', group._nodeIndex);
        return "<li class=\"ui-menu-item\" role=\"presentation\"><a id=\"" + group._domId + "\" href=\"javascript:void(0)\" class=\"ui-priority-primary bar-sp-option-group\"role=\"group\" aria-hidden=\"false\" tabindex=\"-1\">" + $('<div>').text(group.label).html() + "</a></li>";
      } else {
        return '';
      }
    },
    _createOption: function(option){
      var classes, style, wrapperClass;
      if (!option.disabled) {
        option._domId = this._generateDomId('option', option._nodeIndex);
        classes = ['ui-corner-all', 'bar-sp-option'];
        if (option.selected) {
          classes[classes.length] = 'bar-sp-selected';
        }
        if (option._groupIndex != null) {
          classes[classes.length] = 'bar-sp-grouped-option';
        }
        if (this.options.inherit && option.classes !== '') {
          classes[classes.length] = option.classes;
        }
        style = this.options.inherit && option.style !== '' ? " style=\"" + option.style + "\"" : '';
        wrapperClass = 'ui-menu-item' + (option.selected ? ' ui-helper-hidden' : '');
        return "<li class=\"" + wrapperClass + "\" role=\"presentation\"><a id=\"" + option._domId + "\" href=\"javascript:void(0)\" class=\"" + join$.call(classes, ' ') + "\"" + style + " role=\"option\"aria-hidden=\"false\" tabindex=\"-1\">" + option.html + "</a></li>";
      } else {
        return '';
      }
    },
    _buildDeselectControl: function(){
      if (!this.selection.find('div.bar-sp-deselect').length) {
        this.selection.find('span').first().after('<div class="ui-icon ui-icon-close bar-sp-deselect"/>');
      }
    },
    _buildSelection: function(option){
      var selectionId, html, link, this$ = this;
      if (this.options.maxSelected <= this.selections) {
        return;
      }
      selectionId = this._generateDomId('selection', option._nodeIndex);
      this.selections += 1;
      if (option.disabled) {
        html = "<li class=\"ui-corner-all ui-state-disabled bar-sp-selection\" id=\"" + selectionId + "\"><span>" + option.html + "</span></li>";
      } else {
        html = "<li class=\"ui-corner-all ui-state-default bar-sp-selection\" id=\"" + selectionId + "\"><span>" + option.html + "</span><a href=\"javascript:void(0)\" class=\"ui-icon ui-icon-closethick bar-sp-selection-close\" tabindex=\"-1\"></a></li>";
      }
      this.searchContainer.before(html);
      link = $("#" + selectionId).find('a').first();
      link.mousedown(function(event){
        event.preventDefault();
        if (this$.options.disabled) {
          event.stopPropagation();
        } else {
          this$.clicked = true;
          this$.destructionPending = true;
          this$._deselectOption(event, $("#" + this$._generateDomId('option', option._nodeIndex)));
        }
      });
      link.mouseup(function(){
        this$.clicked = false;
      });
    },
    _openDropdown: function(){
      var ddTop;
      if (!this.multiple) {
        this.selection.addClass('ui-state-active bar-sp-with-drop');
        this.selection.find('div').removeClass('ui-icon-triangle-1-s').addClass('ui-icon-triangle-1-n');
        if (this.selectedOption) {
          this._highlightOption(this.selectedOption);
        }
      } else if (this.options.maxSelected <= this.selections) {
        return;
      } else {
        this.selection.addClass('bar-sp-with-drop');
      }
      ddTop = this.container.height();
      this.dropdown.css({
        top: ddTop + 'px'
      }).removeClass('ui-helper-hidden-accessible');
      this.searchField.focus();
      this.searchField.val(this.searchField.val());
      this._filterOptions();
      if (!this.open) {
        this._trigger('open', null, {
          item: this.container
        });
      }
      this.open = true;
    },
    _selectItem: function(item){
      var $element;
      item.selected = true;
      if (item._element != null) {
        $element = $(item._element);
        $element.prop('selected', true);
        $element.parents('select').trigger('change');
      }
    },
    _deselectItem: function(item){
      var $element;
      item.selected = false;
      if (item._element != null) {
        $element = $(item._element);
        $element.prop('selected', false);
        if (this.multiple) {
          $element.parents('select').trigger('change');
        }
      }
    },
    _closeDropdown: function(){
      if (this.multiple) {
        this.selection.removeClass('bar-sp-with-drop');
      } else {
        this.selection.removeClass('ui-state-active bar-sp-with-drop');
        this.selection.find('div').removeClass('ui-icon-triangle-1-n').addClass('ui-icon-triangle-1-s');
      }
      this._clearHighlight();
      this.dropdown.addClass('ui-helper-hidden-accessible');
      if (this.open) {
        this._trigger('close', null, {
          item: this.container
        });
      }
      this.open = false;
    },
    _toggleDropdown: function(){
      if (this.open) {
        this._closeDropdown();
      } else {
        this._openDropdown();
      }
    },
    _resetOptions: function(event){
      var indices, res$, i$, ref$, len$, item, index, option, oldValue, oldItem;
      if (this.multiple) {
        res$ = [];
        for (i$ = 0, len$ = (ref$ = this.currentValue).length; i$ < len$; ++i$) {
          item = ref$[i$];
          res$.push(item._nodeIndex);
        }
        indices = res$;
        for (i$ = 0, len$ = indices.length; i$ < len$; ++i$) {
          index = indices[i$];
          option = $("#" + this._generateDomId('option', index));
          this._deselectOption(event, option);
        }
      } else {
        this.selection.find('span').text(this.options.defaultText).addClass('ui-priority-secondary');
        oldValue = this.currentValue;
        oldItem = this.selectedOption;
        if (oldItem != null) {
          this._deselectItem(oldItem);
        }
        this.currentValue = null;
        this.selectedOption = null;
        this.selection.find('.bar-sp-deselect').remove();
        this._activateOption(this.selectOptions.find('.bar-sp-selected').removeClass('bar-sp-selected'));
        if (this.active) {
          this._closeDropdown();
        }
        if (oldValue !== null) {
          this._trigger('change', event, {
            item: null,
            data: null
          });
        }
      }
    },
    _selectOption: function(event, option){
      var position, value, pos, group, visible, i$, to$, index, sHeight, sWidth, newHeight, newWidth, ref$, oldValue;
      if (option != null) {
        this._clearHighlight();
        position = this._getModelIndex(option);
        value = this.model[position];
        if (value.selected) {
          return;
        }
        if (this.multiple) {
          this._deactivateOption(option);
          if (pos = value._groupIndex) {
            group = this.model[pos];
            visible = false;
            for (i$ = pos + 1, to$ = pos + group._children; i$ < to$; ++i$) {
              index = i$;
              if (!this.model[index].selected) {
                visible = true;
                break;
              }
            }
            if (!visible) {
              this._deactivateOption($("#" + group._domId));
            }
          }
        } else {
          this._activateOption(this.selectOptions.find('a.bar-sp-selected').removeClass('bar-sp-selected'));
          this.selectedOption = option;
          this.selection.find('span').removeClass('ui-priority-secondary');
        }
        option.addClass('bar-sp-selected');
        this._selectItem(value);
        if (this.multiple) {
          sHeight = this.selection.outerHeight();
          sWidth = this.selection.outerWidth();
          this._buildSelection(value);
          newHeight = this.selection.outerHeight();
          newWidth = this.selection.outerWidth();
        } else {
          this.selection.find('span').first().text(value.text);
          if (this.options.deselectable) {
            this._buildDeselectControl();
          }
        }
        if (!(this.multiple && ((event != null && event.metaKey) || (event != null && event.ctrlKey)))) {
          this._closeDropdown();
        }
        this.searchField.val('');
        if (this.multiple && (sHeight !== newHeight || sWidth !== newWidth)) {
          this._trigger('resize', event, {
            item: this.selection,
            data: {
              height: newHeight,
              width: newWidth
            }
          });
        }
        if (this.multiple && $.inArray(value, this.currentValue === -1)) {
          (ref$ = this.currentValue)[ref$.length] = value;
          this._trigger('change', event, {
            item: option,
            data: value
          });
        }
        if (!this.multiple && value !== this.currentValue) {
          oldValue = this.currentValue;
          if (oldValue != null) {
            this._deselectItem(oldValue);
          }
          this.currentValue = value;
          this._trigger('change', event, {
            item: option,
            data: value
          });
        }
        this._resizeSearchField();
      }
    },
    _deselectOption: function(event, option){
      var pos, value, index, selection, sHeight, sWidth, newHeight, newWidth;
      pos = this._getModelIndex(option);
      value = this.model[pos];
      if (!value.disabled) {
        this._deselectItem(value);
        this._activateOption(option);
        if (value._groupIndex) {
          this._activateOption($("#" + this._generateDomId('group', value._groupIndex)));
        }
        this._clearHighlight();
        this._filterOptions();
        index = $.inArray(value, this.currentValue);
        this.currentValue.splice(index, 1);
        selection = $("#" + this._generateDomId('selection', pos));
        this.selections -= 1;
        if (this.selections > 0 && this.searchField.val().length === 0) {
          this._closeDropdown();
        }
        sHeight = this.selection.outerHeight();
        sWidth = this.selection.outerWidth();
        selection.remove();
        newHeight = this.selection.outerHeight();
        newWidth = this.selection.outerHeight();
        this.searchField.focus();
        this._setSearchFieldDefault();
        this._resizeSearchField();
        if (sHeight !== newHeight || sWidth !== newWidth) {
          this._trigger('resize', event, {
            item: this.selection,
            data: {
              height: newHeight,
              width: newWidth
            }
          });
        }
        this._trigger('change', event, {
          item: null,
          data: null
        });
      }
    },
    _highlightOption: function(option){
      var maxHeight, visibleTop, visibleBottom, highlightTop, highlightBottom;
      if (option.length) {
        this._clearHighlight();
        this.highlightedOption = option;
        this.highlightedOption.addClass('ui-state-focus');
        this.selection.attr('aria-activedescendant', this.highlightedOption.attr('id'));
        maxHeight = parseInt(this.selectOptions.css('maxHeight'));
        visibleTop = this.selectOptions.scrollTop();
        visibleBottom = maxHeight + visibleTop;
        highlightTop = this.highlightedOption.position().top + this.selectOptions.scrollTop();
        highlightBottom = highlightTop + this.highlightedOption.outerHeight();
        if (highlightBottom >= visibleBottom) {
          this.selectOptions.scrollTop(highlightBottom - maxHeight > 0 ? highlightBottom - maxHeight : 0);
        } else if (highlightTop < visibleTop) {
          this.selectOptions.scrollTop(highlightTop);
        }
      }
    },
    _clearHighlight: function(){
      if (this.highlightedOption) {
        this.highlightedOption.removeClass('ui-state-focus');
      }
      this.highlightedOption = null;
    },
    _activateOption: function(option){
      option.parent().removeClass('ui-helper-hidden');
      option.attr('aria-hidden', 'false');
    },
    _deactivateOption: function(option){
      option.parent().addClass('ui-helper-hidden');
      option.attr('aria-hidden', 'true');
    },
    _activateWidget: function(event){
      this.container.addClass('bar-sp-active');
      if (!this.multiple) {
        this.selection.addClass('ui-state-focus');
      }
      this.active = true;
      this.searchField.val(this.searchField.val());
      this.searchField.focus();
    },
    _deactivateWidget: function(event){
      $(document).unbind('click', this.documentClickAction);
      this.active = false;
      this._closeDropdown();
      this.container.removeClass('bar-sp-active');
      if (!this.multiple) {
        this.selection.removeClass('ui-state-focus');
      }
      this._clearOptionsFilter();
      this._clearBackspace();
      this._setSearchFieldDefault();
      this._resizeSearchField();
    },
    _filterOptions: function(){
      var count, searchText, regexAnchor, escapedSearch, regex, partRegex, i$, ref$, len$, option, found, resultId, result, start, parts, j$, len1$, part, text;
      this._clearNotFound();
      count = 0;
      searchText = $('<div>').text($.trim(this.searchField.val())).html();
      regexAnchor = this.options.anchoredSearch ? '^' : '';
      escapedSearch = searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
      regex = new RegExp(regexAnchor + escapedSearch, 'i');
      partRegex = new RegExp('\\s' + escapedSearch, 'i');
      for (i$ = 0, len$ = (ref$ = this.model).length; i$ < len$; ++i$) {
        option = ref$[i$];
        if (!option.disabled && !option.empty) {
          if (option.group) {
            this._deactivateOption($("#" + option._domId));
          } else if (!(this.multiple && option.selected)) {
            found = false;
            resultId = option._domId;
            result = $("#" + resultId);
            if ((start = option.html.search(regex)) !== -1) {
              found = true;
              count += 1;
            } else if (this.options.splitSearch && (option.html.indexOf(' ') !== -1 || option.html.indexOf('[') === 0)) {
              parts = option.html.replace(/\[|\]/g, '').split(' ');
              if (parts.length) {
                for (j$ = 0, len1$ = parts.length; j$ < len1$; ++j$) {
                  part = parts[j$];
                  if (regex.test(part)) {
                    found = true;
                    count += 1;
                    start = option.html.search(partRegex) + 1;
                    break;
                  }
                }
              }
            }
            if (found) {
              if (searchText.length) {
                text = option.html.substr(0, start + searchText.length) + "</span>" + option.html.substr(start + searchText.length);
                text = text.substr(0, start) + "<span class=\"ui-priority-primary\">" + text.substr(start);
              } else {
                text = option.html;
              }
              result.html(text);
              this._activateOption(result);
              if (option._groupIndex != null) {
                this._activateOption($("#" + this.model[option._groupIndex]._domId));
              }
            } else {
              if (this.highlightedOption && resultId === this.highlightedOption.attr('id')) {
                this._clearHighlight();
              }
              this._deactivateOption(result);
            }
          }
        }
      }
      if (count < 1 && searchText.length) {
        this._notFound(searchText);
      } else {
        this._setFilterHighlight();
      }
    },
    _clearOptionsFilter: function(){
      var links, i$, len$, a, link;
      this.searchField.val('');
      links = this.selectOptions.find('a');
      for (i$ = 0, len$ = links.length; i$ < len$; ++i$) {
        a = links[i$];
        link = $(a);
        if (!this.multiple || link.hasClass('bar-sp-option-group') || !link.hasClass('bar-sp-selected')) {
          this._activateOption(link);
        }
      }
    },
    _setFilterHighlight: function(){
      var selected, highlighted;
      if (!this.highlightedOption) {
        selected = this.multiple
          ? []
          : this.selectOptions.find('.bar-sp-selected');
        highlighted = selected.length
          ? selected.first()
          : this.selectOptions.find('.bar-sp-option').first();
        if (highlighted.length) {
          this._highlightOption(highlighted);
        }
      }
    },
    _notFound: function(text){
      var html;
      html = $("<li class=\"bar-sp-not-found ui-menu-item\"><a href=\"javascript:void(0)\">" + this.options.notFoundText + " \"" + text + "\"</a></li>");
      this.selectOptions.append(html);
    },
    _clearNotFound: function(){
      this.selectOptions.find('.bar-sp-not-found').remove();
    },
    _setDisabledState: function(){
      if (this.options.disabled) {
        this.container.addClass('bar-sp-disabled ui-state-disabled');
        this.searchField[0].disabled = true;
        this._deactivateWidget();
      } else {
        this.container.removeClass('bar-sp-disabled ui-state-disabled');
        this.searchField[0].disabled = false;
      }
    },
    _setSearchFieldDefault: function(){
      if (this.multiple && this.selections < 1 && !this.active) {
        this.searchField.val(this.options.defaultText).addClass('bar-sp-default');
      } else {
        this.searchField.val('').removeClass('bar-sp-default');
      }
    },
    _resizeSearchField: function(){
      var sfWidth, styleText, styles, i$, len$, style, tempDiv, ddWidth, ddTop;
      if (this.multiple) {
        sfWidth = 0;
        styleText = 'position:absolute;left:-1000px;top:-1000px;display:none;';
        styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
        for (i$ = 0, len$ = styles.length; i$ < len$; ++i$) {
          style = styles[i$];
          styleText += style + ":" + this.searchField.css(style) + ";";
        }
        tempDiv = $('<div>', {
          style: styleText
        });
        tempDiv.text(this.searchField.val());
        $('body').append(tempDiv);
        sfWidth = tempDiv.width + 25;
        if (sfWidth > this.width - 10) {
          sfWidth = this.width - 10;
        }
        tempDiv.remove();
      } else {
        ddWidth = this.width - this._getBorderAndSideWidth(this.dropdown);
        sfWidth = ddWidth - this._getBorderAndSideWidth(this.searchContainer) - this._getBorderAndSideWidth(this.searchField);
      }
      ddTop = this.container.height();
      this.searchField.css({
        width: sfWidth + 'px'
      });
      this.dropdown.css({
        top: ddTop + 'px'
      });
    },
    _setTabIndex: function(){
      var index;
      index = this.element.attr('tabindex');
      if (index) {
        this.element.attr('tabindex', -1);
        this.searchField.attr('tabindex', index);
      }
    },
    _revertTabIndex: function(){
      var index;
      index = this.searchField.attr('tabindex');
      if (index) {
        this.searchField.attr('tabindex', -1);
        this.element.attr('tabindex', index);
      }
    },
    _clearBackspace: function(){
      if (this.pendingDeselection) {
        this.pendingDeselection.removeClass('ui-state-focus');
      }
      this.pendingDeselection = null;
    },
    _generateContainerId: function(){
      var result, i;
      result = 'sp-' + (function(){
        var i$, results$ = [];
        for (i$ = 1; i$ <= 6; ++i$) {
          i = i$;
          results$.push(this._generateChar());
        }
        return results$;
      }.call(this)).join('');
      while ($("#" + result).length) {
        result += this._generateChar();
      }
      return result;
    },
    _generateChar: function(){
      var chars, rand;
      chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      rand = Math.floor(Math.random() * chars.length);
      return chars.charAt(rand);
    },
    _generateDomId: function(type, index){
      return type + "-" + this.containerId + "-" + index;
    },
    _getBorderAndSideWidth: function(element){
      return element.outerWidth() - element.width();
    },
    _getModelIndex: function(option){
      var id;
      id = option.attr('id');
      return id.substr(id.lastIndexOf('-') + 1);
    },
    _sanitizeItem: function(item){
      var result, key, value, own$ = {}.hasOwnProperty;
      result = {};
      for (key in item) if (own$.call(item, key)) {
        value = item[key];
        if (key.indexOf('_') !== 0) {
          result[key] = value;
        }
      }
      return result;
    },
    _parse: function(){
      if (this.options.data) {
        return this._parseData(this.options.data);
      } else if (this.element[0].nodeName.toLowerCase() === 'select') {
        return this._parseOptions(this.element[0]);
      } else {
        return [];
      }
    },
    _parseData: function(data){
      var optionIndex, model, addNode, addGroup, addOption, i$, len$, node;
      optionIndex = 0;
      model = [];
      addNode = function(node){
        var ref$;
        if ((ref$ = node.children) != null && ref$.length) {
          addGroup(node);
        } else {
          addOption(node);
        }
      };
      addGroup = function(node){
        var position, newNode, ref$, key, val, i$, len$, option, own$ = {}.hasOwnProperty;
        position = model.length;
        newNode = {
          _nodeIndex: position,
          group: true,
          label: (ref$ = node.label) != null
            ? ref$
            : (ref$ = node.text) != null ? ref$ : '',
          _children: 0,
          disabled: (ref$ = node.disabled) != null ? ref$ : false
        };
        for (key in node) if (own$.call(node, key)) {
          val = node[key];
          if (!$.inArray(key, ['_nodeIndex', 'group', 'label', '_children', 'disabled'])) {
            newNode[key] = val;
          }
        }
        model[model.length] = newNode;
        for (i$ = 0, len$ = (ref$ = node.children).length; i$ < len$; ++i$) {
          option = ref$[i$];
          addOption(option, position, node.disabled);
        }
      };
      addOption = function(node, groupPosition, groupDisabled){
        var ref$, newNode, ref1$, key, val, own$ = {}.hasOwnProperty;
        if (!((ref$ = node.children) != null && ref$.length)) {
          if (node.text !== '') {
            if (groupPosition != null) {
              model[groupPosition]._children += 1;
            }
            newNode = {
              _nodeIndex: model.length,
              _optionIndex: optionIndex,
              value: (ref1$ = node.value) != null
                ? ref1$
                : node.text,
              text: node.text,
              html: (ref1$ = node.html) != null
                ? ref1$
                : node.text,
              selected: (ref1$ = node.selected) != null ? ref1$ : false,
              disabled: groupDisabled
                ? groupDisabled
                : (ref1$ = node.disabled) != null ? ref1$ : false,
              _groupIndex: groupPosition,
              classes: node.classes,
              style: node.style
            };
          } else {
            newNode = {
              _nodeIndex: model.length,
              _optionIndex: optionIndex,
              empty: true
            };
          }
          for (key in node) if (own$.call(node, key)) {
            val = node[key];
            if (!$.inArray(key, ['_nodeIndex', '_optionIndex', 'value', 'text', 'html', 'selected', 'disabled', '_groupIndex', 'classes', 'style'])) {
              newNode[key] = val;
            }
          }
          optionIndex += 1;
          model[model.length] = newNode;
        }
      };
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        node = data[i$];
        addNode(node);
      }
      return model;
    },
    _parseOptions: function(element){
      var optionIndex, model, addNode, addGroup, addOption, i$, ref$, len$, node;
      optionIndex = 0;
      model = [];
      addNode = function(node){
        if (node.nodeName.toLowerCase() === 'optgroup') {
          addGroup(node);
        } else {
          addOption(node);
        }
      };
      addGroup = function(node){
        var position, newNode, i$, ref$, len$, option;
        position = model.length;
        newNode = {
          _element: node,
          _nodeIndex: position,
          group: true,
          label: node.label,
          _children: 0,
          disabled: node.disabled
        };
        model[model.length] = newNode;
        for (i$ = 0, len$ = (ref$ = node.childNodes).length; i$ < len$; ++i$) {
          option = ref$[i$];
          addOption(option, position, node.disabled);
        }
      };
      addOption = function(node, groupPosition, groupDisabled){
        var newNode;
        if (node.nodeName.toLowerCase() === 'option') {
          if (node.text !== '') {
            if (groupPosition != null) {
              model[groupPosition]._children += 1;
            }
            newNode = {
              _element: node,
              _nodeIndex: model.length,
              _optionIndex: optionIndex,
              value: node.value,
              text: node.text,
              html: node.innerHTML,
              selected: node.selected,
              disabled: groupDisabled
                ? groupDisabled
                : node.disabled,
              _groupIndex: groupPosition,
              classes: node.className,
              style: node.style.cssText
            };
          } else {
            newNode = {
              _nodeIndex: model.length,
              _optionIndex: optionIndex,
              empty: true
            };
          }
          optionIndex += 1;
          model[model.length] = newNode;
        }
      };
      for (i$ = 0, len$ = (ref$ = element.childNodes).length; i$ < len$; ++i$) {
        node = ref$[i$];
        addNode(node);
      }
      return model;
    }
  });
}.call(this, jQuery));
},{}]},{},[1]);
